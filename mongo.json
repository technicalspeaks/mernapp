[
    {
        
    "Install MongoDB Driver":[
        "Installation",
        "C:\\Users\\Your Name>npm install mongodb",
        "Let us try to access a MongoDB database with Node.js.\n\nTo download and install the official MongoDB driver, open the Command Terminal and execute the following:\n\nNow you have downloaded and installed a mongodb database driver.\n\nNode.js can use this module to manipulate MongoDB databases:",
        "",
        "var mongo = require('mongodb');"
    ],
"Creating a Database": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/mydb\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  console.log(\"Database created!\");\n  db.close();\n});",
  "To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.\n\nMongoDB will create the database if it does not exist, and make a connection to it\nSave the code above in a file called \"demo_create_mongo_db.js\" and run the file:\n\n"
],
"Creating a Collection": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.createCollection(\"customers\", function(err, res) {\n    if (err) throw err;\n    console.log(\"Collection created!\");\n    db.close();\n  });\n});",
  "To create a collection in MongoDB, use the createCollection() method.\nSave the code above in a file called \"demo_mongodb_createcollection.js\" and run the file\n"
],
"Insert Into Collection": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myobj = { name: \"Company Inc\", address: \"Highway 37\" };\n  dbo.collection(\"customers\").insertOne(myobj, function(err, res) {\n    if (err) throw err;\n    console.log(\"1 document inserted\");\n    db.close();\n  });\n});",
  "To insert a record, or document as it is called in MongoDB, into a collection, we use the insertOne() method.\n\nA document in MongoDB is the same as a record in MySQL\n\nThe first parameter of the insertOne() method is an object containing the name(s) and value(s) of each field in the document you want to insert.\n\nIt also takes a callback function where you can work with any errors, or the result of the insertion\nSave the code above in a file called \"demo_mongodb_insert.js\" and run the file."
],
"Find Record in Database": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").findOne({}, function(err, result) {\n    if (err) throw err;\n    console.log(result.name);\n    db.close();\n  });\n});",
  "To select data from a collection in MongoDB, we can use the findOne() method.\n\nThe findOne() method returns the first occurrence in the selection.\n\nThe first parameter of the findOne() method is a query object. In this example we use an empty query object, which selects all documents in a collection (but returns only the first document).\nSave the code above in a file called \"demo_mongodb_findone.js\" and run the file:\n"

],
"Filter the Result": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var query = { address: \"Park Lane 38\" };\n  dbo.collection(\"customers\").find(query).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});",
  "When finding documents in a collection, you can filter the result by using a query object.\n\nThe first argument of the find() method is a query object, and is used to limit the search.\n\nSave the code above in a file called \"demo_mongodb_query.js\" and run the file:\n"
],
"Sort the Result": [
  "Sort the Result in ascending order",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: 1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});",
  "Use the sort() method to sort the result in ascending or descending order.\n\nThe sort() method takes one parameter, an object defining the sorting order.\n",
  "Sort the Result in descending order",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var mysort = { name: -1 };\n  dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});"
],
"Delete and Drop": [
  "Delete Document",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: 'Mountain 21' };\n  dbo.collection(\"customers\").deleteOne(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(\"1 document deleted\");\n    db.close();\n  });\n});",
  "To delete a record, or document as it is called in MongoDB, we use the deleteOne() method.\n\nThe first parameter of the deleteOne() method is a query object defining which document to delete.\n\nNote: If the query finds more than one document, only the first occurrence is deleted.",
  "Delete Many",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^O/ };\n  dbo.collection(\"customers\").deleteMany(myquery, function(err, obj) {\n    if (err) throw err;\n    console.log(obj.result.n + \" document(s) deleted\");\n    db.close();\n  });\n});",
  "To delete more than one document, use the deleteMany() method.\n\nThe first parameter of the deleteMany() method is a query object defining which documents to delete.",
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").drop(function(err, delOK) {\n    if (err) throw err;\n    if (delOK) console.log(\"Collection deleted\");\n    db.close();\n  });\n});",
  "You can delete a table, or collection as it is called in MongoDB, by using the drop() method.\n\nThe drop() method takes a callback function containing the error object and the result parameter which returns true if the collection was dropped successfully, otherwise it returns false."
],
"Update in MongoDB":[
  "Update Document",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: \"Valley 345\" };\n  var newvalues = { $set: {name: \"Mickey\", address: \"Canyon 123\" } };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(\"1 document updated\");\n    db.close();\n  });\n});",
  "You can update a record, or document as it is called in MongoDB, by using the updateOne() method.\n\nThe first parameter of the updateOne() method is a query object defining which document to update.\n\nNote: If the query finds more than one record, only the first occurrence is updated.\n\nThe second parameter is an object defining the new values of the document.\n\n Above mentioned code will Update the document with the address \"Valley 345\" to name=\"Mickey\" and address=\"Canyon 123\":",
  "Update Only Specific Fields",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: \"Valley 345\" };\n  var newvalues = {$set: {address: \"Canyon 123\"} };\n  dbo.collection(\"customers\").updateOne(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(\"1 document updated\");\n    db.close();\n  });\n});\n",
  "When using the $set operator, only the specified fields are updated",
  "Update Many Documents",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  var myquery = { address: /^S/ };\n  var newvalues = {$set: {name: \"Minnie\"} };\n  dbo.collection(\"customers\").updateMany(myquery, newvalues, function(err, res) {\n    if (err) throw err;\n    console.log(res.result.nModified + \" document(s) updated\");\n    db.close();\n  });\n});",
  "To update all documents that meets the criteria of the query, use the updateMany() method.\nAbove code will Update all documents where the name starts with the letter \"S\""
],
"Limit the Result": [
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection(\"customers\").find().limit(5).toArray(function(err, result) {\n    if (err) throw err;\n    console.log(result);\n    db.close();\n  });\n});\n",
  "To limit the result in MongoDB, we use the limit() method.\n\nThe limit() method takes one parameter, a number defining how many documents to return.\nAbove code will Limit the result to only return 5 documents"
],
"Join Collections": [
  "Consider you have a \"orders\" collection",
  "[\n  { _id: 1, product_id: 154, status: 1 }\n]",
  "",
  "Consider you have a \"products\" collection",
  "[\n  { _id: 154, name: 'Chocolate Heaven' },\n  { _id: 155, name: 'Tasty Lemons' },\n  { _id: 156, name: 'Vanilla Dreams' }\n]",
  "Join the matching \"products\" document(s) to the \"orders\" collection:\n",
  "",
  "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://127.0.0.1:27017/\";\n\nMongoClient.connect(url, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(\"mydb\");\n  dbo.collection('orders').aggregate([\n    { $lookup:\n       {\n         from: 'products',\n         localField: 'product_id',\n         foreignField: '_id',\n         as: 'orderdetails'\n       }\n     }\n    ]).toArray(function(err, res) {\n    if (err) throw err;\n    console.log(JSON.stringify(res));\n    db.close();\n  });\n});",
  "MongoDB is not a relational database, but you can perform a left outer join by using the $lookup stage.\n\nThe $lookup stage lets you specify which collection you want to join with the current collection, and which fields that should match."
]
    }
]